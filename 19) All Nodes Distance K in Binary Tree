/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    void markparents(TreeNode* root,map<TreeNode*,TreeNode*>&parent,TreeNode* target)
    {
        queue<TreeNode*>q;
        q.push(root);

        while(!q.empty())
        {
            TreeNode* curr=q.front();
            q.pop();

            if(curr->left!=NULL)
            {
                parent[curr->left]=curr;
                q.push(curr->left);
            }

            if(curr->right!=NULL)
            {
                parent[curr->right]=curr;
                q.push(curr->right);
            }
        }


    }

    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
         
         map<TreeNode*,TreeNode*>parent;

         markparents(root,parent,target);

         map<TreeNode*,bool>visited;
         queue<TreeNode*>q;

         q.push(target);
         visited[target]=true;
         int dist=0;



         while(!q.empty())
         {
             int n=q.size();
             
             if(dist++ ==k) break;
             
           
             for(int i=0;i<n;i++)
             {
                 TreeNode* curr=q.front();
                 q.pop();

                 if(curr->left!=NULL and visited[curr->left]==false)
                 {
                     visited[curr->left]=true;
                     q.push(curr->left);
                 }

                 if(curr->right!=NULL and visited[curr->right]==false)
                 {
                     visited[curr->right]=true;
                     q.push(curr->right);
                 }

                 if(parent[curr]!=NULL and visited[parent[curr]]==false)
                 {
                     visited[parent[curr]]=true;
                     q.push(parent[curr]);
                 }
             }




         }


         vector<int>ans;

         while(!q.empty())
         {
             TreeNode* temp=q.front();
             q.pop();

             ans.push_back(temp->val);
         }

       return ans;

    }
};
