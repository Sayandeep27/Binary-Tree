class Solution {
  public:
    int minTime(Node* root, int target) 
    {
        unordered_map<Node*,Node*>mp;
        
        queue<Node*>q;
        
        q.push(root);
        
        mp[root]=NULL;
        
        Node* initial;
        
        while(!q.empty())
        {
            int n=q.size();
            
            for(int i=0;i<n;i++)
            {
                Node* temp=q.front();
                q.pop();
                
                if(temp->data==target)
                {
                    initial=temp;
                }
                
                if(temp->left!=NULL)
                {
                    mp[temp->left]=temp;
                    q.push(temp->left);
                }
                
                if(temp->right!=NULL)
                {
                    mp[temp->right]=temp;
                    q.push(temp->right);
                }
            }
        }
        
        q.push(initial);
        
        int time=-1;
        
        map<Node*,bool>burn;
        
        while(!q.empty())
        {
            int n=q.size();
            
            for(int i=0;i<n;i++)
            {
                Node* temp=q.front();
                q.pop();
                
                if(mp[temp] and burn[mp[temp]]==false) q.push(mp[temp]);
                
                if(temp->left!=NULL and burn[temp->left]==false) q.push(temp->left);
                
                if(temp->right!=NULL and burn[temp->right]==false) q.push(temp->right);
                
                burn[temp]=true;
            }
            
            time++;
        }
        
        return time;
        
    }
};
