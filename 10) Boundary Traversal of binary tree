class Solution {
public:

     void addLeftBoundary(Node* root,vector<int>&res)
     {
         Node* curr=root->left;
         
         while(curr)
         {
             if(!isLeaf(curr)) res.push_back(curr->data);
             
             if(curr->left) curr=curr->left;
             else
             {
                 curr=curr->right;
             }
         }
     }
    
    void addRightBoundary(Node* root,vector<int>&res)
    {
        Node* curr=root->right;
        
        vector<int>temp;
        
        while(curr)
        {
            if(!isLeaf(curr))  temp.push_back(curr->data);
            
            if(curr->right!=NULL) curr=curr->right;
            else
            {
                curr=curr->left;
            }
            
          
        }
        
        for(int i=temp.size()-1;i>=0;i--)
        {
             res.push_back(temp[i]);
        }
    }
    
    void addLeaves(Node* root,vector<int>&res)
    {
        if(isLeaf(root))
        {
            res.push_back(root->data);
            return;
        }
        
        if(root->left) addLeaves(root->left,res);
        if(root->right) addLeaves(root->right,res);
    }
   
    bool isLeaf(Node* node)
    {
        if(node->left==NULL and node->right==NULL) return true;
        
        return false;
    }


    vector <int> boundary(Node *root)
    {
        vector<int>res;
        
        if(root==NULL) return res;
        
        if(!isLeaf(root)) res.push_back(root->data);
        
        addLeftBoundary(root,res);
        addLeaves(root,res);
        addRightBoundary(root,res);
        
        return res;
    }
};
