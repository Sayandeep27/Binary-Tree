class Solution {
public:
    vector<int>ans;

    bool isLeaf(Node* node)
    {
        if(node->left==NULL and node->right==NULL) return true;
        
        return false;
    }
    
    
    void addLeftBoundary(Node* root)
    {
        Node* curr=root->left;
        
        while(curr!=NULL)
        {
            if(isLeaf(curr)==false) ans.push_back(curr->data);
            
            if(curr->left!=NULL) curr=curr->left;
            else curr=curr->right;
        }
    }
    
    void addRightBoundary(Node* root)
    {
        Node* curr=root->right;
        
        stack<int>st;
        
        while(curr!=NULL)
        {
            if(isLeaf(curr)==false) st.push(curr->data);
            
            if(curr->left!=NULL) curr=curr->left;
            else curr=curr->right;
        }
        
        
        // adding the stack elements into ans vector
        while(!st.empty())
        {
            ans.push_back(st.top());
            st.pop();
        }
    }
    
    void addLeaf(Node* root)
    {
        if(isLeaf(root)==true)
        {
            ans.push_back(root->data);
            return;
        }
        
        if(root->left!=NULL) addLeaf(root->left);
        
        if(root->right!=NULL) addLeaf(root->right);
    }


    vector <int> boundary(Node *root)
    {
        
        
        
        if(root==NULL) return ans;
        
        if(isLeaf(root)==false)
        {
            ans.push_back(root->data);
        }
        
        addLeftBoundary(root);
        addLeaf(root);
        addRightBoundary(root);
        
        
        return ans;
        
    }
};
